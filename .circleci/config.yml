version: 2.1

# Define reusable executors
executors:
  node-executor:
    docker:
      - image: cimg/node:18.17.0-browsers
    working_directory: ~/project

# Define jobs
jobs:
  setup:
    executor: node-executor
    steps:
      - checkout
      - run:
          name: Install root dependencies
          command: |
            if [ -f package.json ]; then
              npm ci
            fi
      - persist_to_workspace:
          root: ~/project
          paths:
            - .

  ui-tests:
    executor: node-executor
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: Install UI dependencies
          command: |
            cd UI
            # Clean install to avoid version conflicts
            rm -rf node_modules package-lock.json
            npm install
      - run:
          name: Install browsers and WebDriver dependencies
          command: |
            # Update package lists
            sudo apt-get update

            # Install Chrome browser if not present
            if ! command -v google-chrome &> /dev/null; then
              wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
              echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
              sudo apt-get update
              sudo apt-get install -y google-chrome-stable
            fi

            # Install Firefox if not present
            if ! command -v firefox &> /dev/null; then
              sudo apt-get install -y firefox
            fi

            # Install ChromeDriver if not present
            if ! command -v chromedriver &> /dev/null; then
              CHROME_VERSION=$(google-chrome-stable --version | cut -d " " -f3 | cut -d "." -f1)
              CHROMEDRIVER_VERSION=$(curl -s "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_${CHROME_VERSION}")
              wget -q "https://chromedriver.storage.googleapis.com/${CHROMEDRIVER_VERSION}/chromedriver_linux64.zip"
              unzip chromedriver_linux64.zip
              sudo mv chromedriver /usr/bin/
              sudo chmod +x /usr/bin/chromedriver
            fi

            # Install GeckoDriver for Firefox with proper permissions
            GECKO_VERSION="v0.33.0"
            wget -q "https://github.com/mozilla/geckodriver/releases/download/${GECKO_VERSION}/geckodriver-${GECKO_VERSION}-linux64.tar.gz"
            tar -xzf geckodriver-${GECKO_VERSION}-linux64.tar.gz
            sudo mv geckodriver /usr/bin/
            sudo chmod +x /usr/bin/geckodriver
            
            # Create symlinks to ensure proper paths
            sudo ln -sf /usr/bin/geckodriver /usr/local/bin/geckodriver
            sudo ln -sf /usr/bin/chromedriver /usr/local/bin/chromedriver

            # Install Xvfb for headless display
            sudo apt-get install -y xvfb

            # Verify installations
            echo "=== Browser and Driver Versions ==="
            google-chrome-stable --version || echo "Chrome not found"
            firefox --version || echo "Firefox not found"
            chromedriver --version || echo "ChromeDriver not found"
            geckodriver --version || echo "GeckoDriver not found"

            # Check binary locations and permissions
            echo "=== Binary Locations ==="
            which google-chrome-stable || echo "Chrome binary not in PATH"
            which firefox || echo "Firefox binary not in PATH"
            which chromedriver || echo "ChromeDriver not in PATH"
            which geckodriver || echo "GeckoDriver not in PATH"
            
            echo "=== Binary Permissions ==="
            ls -la $(which chromedriver) || echo "ChromeDriver not found"
            ls -la $(which geckodriver) || echo "GeckoDriver not found"
      - run:
          name: Start Xvfb
          command: |
            export DISPLAY=:99
            Xvfb :99 -screen 0 1280x1024x24 > /dev/null 2>&1 &
            sleep 3
          background: true
      - run:
          name: Test browser functionality
          command: |
            export DISPLAY=:99
            # Test Chrome can start
            google-chrome-stable --version --no-sandbox --headless --disable-gpu
            # Test Firefox can start
            firefox --version --headless
            # Test drivers can start
            chromedriver --version
            geckodriver --version
      - run:
          name: Run UI Tests with Chrome
          command: |
            cd UI
            export DISPLAY=:99
            export MOZ_HEADLESS=1
            CI=true npx nightwatch --env chrome
          environment:
            NODE_ENV: test
      - run:
          name: Run UI Tests with Firefox
          command: |
            cd UI
            export DISPLAY=:99
            export MOZ_HEADLESS=1
            CI=true npx nightwatch --env firefox
          environment:
            NODE_ENV: test
      - store_test_results:
          path: UI/tests_output
      - store_artifacts:
          path: UI/tests_output
          destination: ui-test-results
      - store_artifacts:
          path: UI/screenshots
          destination: ui-screenshots

  api-tests:
    executor: node-executor
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: Install API dependencies
          command: |
            cd API
            npm ci
      - run:
          name: Start Mock API Server
          command: |
            cd API
            npm run dev
          background: true
      - run:
          name: Wait for API server to be ready
          command: |
            timeout 60 bash -c 'until curl -f http://localhost:3000/api/v1/ 2>/dev/null || curl -f http://localhost:3000/ 2>/dev/null; do sleep 2; done'
      - run:
          name: Run API Tests
          command: |
            cd API
            npm test
          environment:
            NODE_ENV: test
      - store_test_results:
          path: API/reports
      - store_artifacts:
          path: API/reports
          destination: api-test-results

# Define workflows
workflows:
  version: 2
  test-pipeline:
    jobs:
      - setup
      - ui-tests:
          requires:
            - setup
      - api-tests:
          requires:
            - setup  # Run API tests in parallel with UI tests for efficiency